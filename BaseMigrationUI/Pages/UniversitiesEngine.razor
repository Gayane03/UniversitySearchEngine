@attribute [Route(Route.Universities)]
@using MudBlazor
@using SharedLibrary.Enum
@using SharedLibrary.RequestModels.CoreRequests
@using SharedLibrary.ResponseModels.CoreResponse
@inject NavigationManager navigationManager;
@inject ApiController apiController;
@inject ResponseMessageUtile responseMessageUtile;
@inject LocalStorageHelper localStorageHelper;
@inject ISnackbar Snackbar;
@inject FavoriteHelper favoriteHelper;
@layout SearchEngineLayout;

@if (isLoaded)
{
	<MudContainer>

		@if (selectedUniversity is null)
		{
			<MudCard Class="my-2">
				<MudCardContent>
					<MudGrid>
						<MudItem xs="12" md="6">
							<MudTextField Label="Համալսարանի անվանումը" @bind-Value="searchRequest.UniversityFilter.QueryUniversityName" />
						</MudItem>
						@if (Enum.GetValues(typeof(City)).Cast<City>().Any())
						{
							<MudItem xs="12" md="6">
								<MudSelect T="City?" @bind-Value="searchRequest.UniversityFilter.City" Label="Համալսարանի գտնվելու վայրը" Variant="Variant.Outlined">
									@foreach (var city in Enum.GetValues(typeof(City)).Cast<City>())
									{
										<MudSelectItem Value="(City?)city">@city.ToString()</MudSelectItem>
									}
								</MudSelect>
							</MudItem>

						}
					</MudGrid>
				</MudCardContent>
			</MudCard>

			@if (universityList is not null && universityList.Any())
			{
				<MudTable Items="@universityList" Dense="true" T="UniversityResponse"
						  SelectedItem="@selectedUniversity"
						  SelectedItemChanged="@OnUniversitySelected"
						  Class="mb-2" Style="box-shadow: 0 4px 8px rgb(0 77 169);">

					<HeaderContent>
						<MudTh>Համալսարան</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd DataLabel="Համալսարան">@context.UniversityName</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager />
					</PagerContent>
				</MudTable>
			}

			<MudGrid Justify="Justify.FlexEnd">
				<MudItem xs="12" Class="my-2" Style="text-align: right;">
					<MudButton OnClick="SearchUniversities" Variant="Variant.Filled" Style="background-color: #c4acda;">Որոնել</MudButton>
			</MudItem>
			</MudGrid>
		}
		else
		{
			<MudCard>
				<MudCardContent>
					<MudGrid>
						<MudItem xs="12">
							<MudText Typo="Typo.h5">@selectedUniversity.UniversityName</MudText>
						</MudItem>
					</MudGrid>
				</MudCardContent>
			</MudCard>

			if (facultyRequest is not null)
			{
				<MudCardContent Class="my-2">
					<MudGrid>
						<MudItem xs="12" md="6">
							<MudTextField Label="Ֆակուլտետ" @bind-Value="facultyRequest.FacultyFilter.QueryFacultyName" />
						</MudItem>

						<MudItem xs="12" md="6">
							<MudNumericField T="double?" Label="Անցողիկ շեմ" @bind-Value="facultyRequest.FacultyFilter.MinimumScoreForFreeTraining" />
						</MudItem>

						<MudItem xs="6" md="6" Class="mt-n4">
							<MudItem xs="12" md="6">
								<MudTextField Label="Քննույուն 1" @bind-Value="selectedExam" />
							</MudItem>

							<MudItem xs="6" md="6">
								<MudTextField Label="Քննություն 2" @bind-Value="selectedExam2" />
							</MudItem>
						</MudItem>

						<MudItem xs="12" md="6">
							<MudNumericField T="int?" Label="Ուսման վարձ" @bind-Value="facultyRequest.FacultyFilter.MaxTuitionFee" />
						</MudItem>

					</MudGrid>
				</MudCardContent>
			}



			<MudTable Items="@facultyList" Dense="true" T="FacultyResponse"
					  SelectedItem="@selectedFaculty"
					  SelectedItemChanged="@OnFacultySelected"
					  Class="mb-2" Style="box-shadow: 0 4px 8px rgb(0 77 169);">

					<HeaderContent>
						<MudTh>Ֆակուլտետ</MudTh>
						<MudTh>Նկրագրություն</MudTh>
					    <MudTh>Ֆավորիտ</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd DataLabel="Ֆակուլտետ">@context.FacultyName</MudTd>
						<MudTd DataLabel="Նկրագրություն">@context.FacultyDescription</MudTd>
					<MudTd DataLabel="Ֆավորիտ" Class="d-flex justify-end">
						@if (favoriteHelper is not null && favoriteHelper.FavoriteIds is not null)
						{
							<MudItem xs="4" Class="d-flex justify-end">
								<MudIconButton Icon="@(favoriteHelper.IsFavorite(0,context.FacultyId) ? Icons.Material.Filled.Favorite : Icons.Material.Outlined.FavoriteBorder)"
											   OnClick="() => favoriteHelper.ToggleFavorite(0,context.FacultyId)"
											   Color="@(favoriteHelper.IsFavorite(0,context.FacultyId) ? Color.Error : Color.Default)" />
							</MudItem>
						}
					</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager />
					</PagerContent>
				</MudTable>

			<MudGrid Justify="Justify.FlexEnd">
				<MudItem xs="12" Class="my-2" Style="text-align: right;">
					<MudButton OnClick="SearchFaculties" Variant="Variant.Filled" Style="background-color: #c4acda;">Որոնել</MudButton>
				</MudItem>
			</MudGrid>
		}
	</MudContainer>
	
@* 	<MudGrid Justify="Justify.FlexEnd">
		<MudItem Class="my-4" Style="text-align: right;">
			<MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Logout">Դուրս գալ համակարգից</MudButton>
		</MudItem>
	</MudGrid> *@
}

@code {


	// public FavoriteHelper favoriteHelper = new();
	List<FavoriteResponse> favoritesResponseList = null;

	private string selectedExam;
	private string selectedExam2;

	private UniversitiesSearchingRequest searchRequest = new() { UniversityFilter = new() };
	private List<UniversityResponse> universityList = new();


	private UniversityResponse? selectedUniversity;




	private FacultyResponse? selectedFaculty;

	private FacultiesSearchingRequest facultyRequest = new() { FacultyFilter = new() };
	private List<FacultyResponse> facultyList = new();

	private bool isLoaded = false;

	private EventCallback<UniversityResponse> OnUniversitySelected => EventCallback.Factory.Create<UniversityResponse>(this, async (university) =>
	{
		selectedUniversity = university;
		await SearchFaculties();
	});

	private EventCallback<FacultyResponse> OnFacultySelected => EventCallback.Factory.Create<FacultyResponse>(this, async (faculty) =>
	{
		selectedFaculty = faculty;
		navigationManager.NavigateTo($"/faculty/{selectedFaculty.FacultyId}");
	});




	protected override async Task OnInitializedAsync()
	{
		try
		{
		
			// isSelectedFaculty = false;
			var token = await GetAccessToken();
			Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
			var firstSelectedProcess = new UniversitiesSearchingRequest() { Page = 1, PerPage = 10 };

			var response = await apiController.GetUniversitiesWithFilter(token, firstSelectedProcess);
			universityList = await responseMessageUtile.HandleResponse<List<UniversityResponse>>(response);


			favoriteHelper.token = token;
			await favoriteHelper.RefreshFavorites();
			favoritesResponseList = favoriteHelper.FavoritesResponseList;

			isLoaded = true;
		}
		catch (Exception ex )
		{
			
			Snackbar.Add("Please contact with support team", MudBlazor.Severity.Error);
		}
		
	}

	private async Task Logout()
	{
		await localStorageHelper.RemoveToken(TokenStorageName.EmailVerification);
		await localStorageHelper.RemoveToken(TokenStorageName.UserAccess);

		navigationManager.NavigateTo(Route.Registration);
	}


	private async Task SearchUniversities()
	{
		try
		{
			var token = await GetAccessToken();
			var response = await apiController.GetUniversitiesWithFilter(token, searchRequest);
			universityList = await responseMessageUtile.HandleResponse<List<UniversityResponse>>(response);
		}
		catch (SystemException ex)
		{
			Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
		}
		catch (Exception ex)
		{
			Snackbar.Add("Please contact with support team", MudBlazor.Severity.Error);
		}
	}


	private async Task<string> GetAccessToken()
	{
		try
		{
			return await localStorageHelper.GetToken(TokenStorageName.UserAccess);
		}
		catch (SystemException ex)
		{
			Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
		}
		catch (Exception ex)
		{
			Snackbar.Add("Please contact with support team", MudBlazor.Severity.Error);
		}

		return null;
	}

	private async Task SearchFaculties()
	{
		try
		{
			var token = await GetAccessToken();

			if(selectedUniversity is not null)
			{
				facultyRequest.UniversityId = selectedUniversity.UniversityId;
			}

			facultyRequest.FacultyFilter.EntranceExams.Add(selectedExam);
			facultyRequest.FacultyFilter.EntranceExams.Add(selectedExam2);

			var response = await apiController.GetFacultiesWithFilter(token, facultyRequest);
			facultyList = await responseMessageUtile.HandleResponse<List<FacultyResponse>>(response);

		
			if (selectedFaculty is not null)
			{
				// navigationManager.NavigateTo($"{Route.Faculty}/{selectedFaculty.FacultyId}");
				navigationManager.NavigateTo($"/faculty/{selectedFaculty.FacultyId}");					
			}
		}
		catch (SystemException ex)
		{
			Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
		}
		catch (Exception ex)
		{
			Snackbar.Add("Please contact with support team", MudBlazor.Severity.Error);
		}
	}
}
